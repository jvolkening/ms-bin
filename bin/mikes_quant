#!/usr/bin/env perl

use strict;
use warnings;
use 5.012;

use Getopt::Long;
use List::Util qw/sum/;

use constant FLOAT_TOL => 0.000001;

my $max_gaps  = 1;
my $min_len   = 3;
my $min_score = 0;
my $max_mass  = 8000;
my $min_mass  = 600;
my $tol       = 10;
my $by_charge = 0;
my $method    = 'trapezoid'; # 'trapezoid' or 'sum'

GetOptions(
    'max_gaps=i'  => \$max_gaps,
    'min_len=i'   => \$min_len,
    'min_score=f' => \$min_score,
    'max_mass=f'  => \$max_mass,
    'min_mass=f'  => \$min_mass,
    'by_charge'   => \$by_charge,
    'method=s'    => \$method,
    'tol=f'       => \$tol,
);

my $scan_curr;
my $rt_curr;
my $index_curr = 0;

my @candidates;
my @finalized;

LINE:
while (my $line = <STDIN>) {
    chomp $line;
    my ($type, @fields) = split "\t", $line;

    # spectrum header
    if ($type eq 'S') {

        my ($scan, $rt, $fn, $pre, @other) = @fields;
        die "ERROR: Only MS1 scans are supported\n"
            if ($pre > 0);
        $scan_curr = $scan;
        $rt_curr   = $rt;
        ++$index_curr;

        # finalize candidates where possible
        my $i = 0;
        while ($i < scalar(@candidates)) {

            my $cand = $candidates[$i];

            if ($index_curr - $cand->{last_index} - 1 <= $max_gaps) {
                ++$i;
                next;
            }

            splice @candidates, $i, 1;
            push @finalized, $cand
                if ($cand->{n_scans} >= $min_len);

        }

        @candidates = sort {$a->{mass} <=> $b->{mass}} @candidates;

    }

    elsif ($type eq 'P') {

        my ($mass, $z, $int, $base, $win, $na, $mod, $score) = @fields;
        next LINE if ($score < $min_score);
        next LINE if ($mass < $min_mass);
        next LINE if ($mass > $max_mass);

        my $merged = 0;

        my $lower = $mass - $mass*$tol/1000000;
        my $i = find_nearest($lower);
        my $last_c = $i;

        CANDIDATE:
        for my $c ($i..$#candidates) {

            $last_c = $c;

            my $cand = $candidates[$c];

            my $delta = $cand->{mass} - $mass;
            last CANDIDATE if ($delta >  $mass*$tol/1000000);
            next CANDIDATE if ($delta < -$mass*$tol/1000000);
            next CANDIDATE if ($by_charge && $cand->{z} != $z);

            next CANDIDATE
                if ($index_curr - $cand->{last_index} - 1 > $max_gaps);

            $cand->{n_scans}   += 1
                if ($index_curr > $cand->{last_index});
            $cand->{last_index} = $index_curr;
            $cand->{last_scan}  = $scan_curr;
            $cand->{last_rt}    = $rt_curr;
            $merged = 1;
            $cand->{ints}->{$z}->{$rt_curr} += $int;
            $cand->{int_sums}->{$rt_curr}   += $int;

            if ($int > $cand->{max_int}) {
                $cand->{max_int} = $int;
                $cand->{mass}    = $mass;
                $cand->{max_rt}  = $rt_curr;
                splice @candidates, $c, 1;
                my $t = find_nearest($mass);
                splice @candidates, $t, 0, $cand;
            }

            last CANDIDATE;

        }

        next LINE if $merged;

        splice @candidates, $last_c, 0, {
            mass        => $mass,
            first_index => $index_curr,
            last_index  => $index_curr,
            first_scan => $scan_curr,
            last_scan  => $scan_curr,
            first_rt    => $rt_curr,
            last_rt     => $rt_curr,
            n_scans     => 1,
            ints        => { $z => { $rt_curr => $int } },
            int_sums    => { $rt_curr => $int },
            max_int     => $int,
            max_rt      => $rt_curr,
            z           => $z,
        };


    }
    else {
        die "ERROR: Unexpected field type $type\n";
    }
}

# do final push
for my $cand (@candidates) {

    push @finalized, $cand
        if ($cand->{n_scans} >= $min_len);

}

@finalized = sort {$a->{first_scan} <=> $b->{first_scan}} @finalized;

# print header
say join "\t", qw/
    first_scan
    last_scan
    scan_range
    n_scans
    z_obs
    neutral_mass
    quant
    first_rt
    last_rt
    peak_rt
    z_dist
    profiles
/;

CANDIDATE:
for my $cand (@finalized) {

    my %int_sums = %{ $cand->{int_sums} };
    my $sum_sums = sum values %int_sums;

    my @zs  = sort {$a <=> $b} keys %{ $cand->{ints}     };
    my @rts = sort {$a <=> $b} keys %{ $cand->{int_sums} };

    my $quant = $sum_sums;

    # use trapezoidal estimate of AUC
    if ($method eq 'trapezoid') {

        my $integrated = 0;
        if (@rts < 2) {
            $integrated = $cand->{int_sums}->{$rts[0]};
        }
        else {
            for (1..$#rts) {
                my $r1 = $rts[$_-1];
                my $r2 = $rts[$_];
                $integrated +=
                    ($cand->{int_sums}->{$r1}
                    + $cand->{int_sums}->{$r2}) / 2
                    *($r2 - $r1);
            }
        }
        $quant = $integrated;

    }

    my %fracs;
    for my $z (@zs) {
        my $total;
        for my $rt (@rts) {
            $total += $cand->{ints}->{$z}->{$rt}
                if (defined $cand->{ints}->{$z}->{$rt});
        }
        $fracs{$z} = sprintf '%0.3f', $total / $sum_sums;
    }

    my @int_strings;
    for my $z (@zs) {
        my @points = map {[ $_ => $cand->{ints}->{$z}->{$_} ]}
            grep {defined $cand->{ints}->{$z}->{$_}} @rts;
        @points = sort {$a->[0] <=> $b->[0]} @points;
        push @int_strings, "$z:" .
            join(',', map {$_->[0], $_->[1]} @points);
    }

    say join "\t",
        $cand->{first_scan},  
        $cand->{last_scan},  
        $cand->{last_index} - $cand->{first_index} + 1,
        $cand->{n_scans},  
        join(',', @zs),
        $cand->{mass},
        $quant,,
        $cand->{first_rt},  
        $cand->{last_rt},
        $cand->{max_rt},
        join( '|', map {"$_:$fracs{$_}"} keys %fracs ),
        join( '|', @int_strings );

}

sub find_nearest {

    my ($mass) = @_;

    return 0 if (scalar(@candidates) < 1);

    # binary search
    my ($lower, $upper) = (0, $#candidates);
    while ($lower != $upper) {
        my $mid = int( ($lower+$upper)/2 );
        ($lower,$upper) = $mass > $candidates[$mid]->{mass} + FLOAT_TOL
            ? ( $mid+1 , $upper )
            : ( $lower , $mid   );
    }

    if ($lower == $#candidates && $candidates[$lower]->{mass} < $mass) {
        return $lower + 1;
    }

    return $lower;

}
