#!/usr/bin/env perl


use strict;
use warnings;
use 5.012;

use autodie;

use Data::Dumper;
use MS::Reader::MzML;
use MS::Reader::PepXML;
use MS::CV qw/:MS/;
use MS::Mass qw/elem_mass/;
use Getopt::Long;
use List::MoreUtils qw/uniq first_index/;
use List::Util qw/min max sum first any shuffle/;
use Math::Matrix;
use threads;
use threads::shared;
use Thread::Queue;
use Thread::Semaphore;
use Statistics::R;
use Statistics::Descriptive;

use constant PROTON => elem_mass('H');
use constant DUP_Q  => 2;

our $VERSION = 0.011;

my $fn_tags;
my $correct_coelute = 0;
my $max_coelute     = 1;
my $reporter_tol    = 20;
my $pre_tol         = 10;
my $pre_shift       = 0;
my $fuzzy_edges     = 0;
my $scale_by_inj    = 0;
my $print_obs       = 0;
my $recal_reporters = 0;
my $plot_reporters;
my $sd_tol          = 6;
my $min_int         = 0;
my $min_matched     = 1;
my $threads         = 1;
my $decoy_tag       = 'REV_';
my $fn_impurities;
my $zero_floor;
my $filter_unlabeled;
my $digits;
my $subtract_baseline = 0;
my $q_cutoff;
my $fn_perc;
my $fn_perc_log;
my $fn_stats;
my $plot_downsample = 10000;

my @orig_argv = @ARGV;

GetOptions(
    'tags=s'            => \$fn_tags,
    'correct_coelute'   => \$correct_coelute,
    'max_coelute=f'     => \$max_coelute,
    'reporter_tol=f'    => \$reporter_tol,
    'pre_tol=f'         => \$pre_tol,
    'pre_shift=f'       => \$pre_shift,
    'fuzzy_edges'       => \$fuzzy_edges,
    'scale_by_inj'      => \$scale_by_inj,
    'output_obs'        => \$print_obs,
    'sd_tol=f'          => \$sd_tol,
    'recal_reporters'   => \$recal_reporters,
    'impurities=s'      => \$fn_impurities,
    'min_intensity=f'   => \$min_int,
    'threads=i'         => \$threads,
    'decoy_tag=s'       => \$decoy_tag,
    'zero_floor'        => \$zero_floor,
    'filter_unlabeled'  => \$filter_unlabeled,
    'digits=i'          => \$digits,
    'plot_reporters=s'  => \$plot_reporters,
    'min_matched=i'     => \$min_matched,
    'subtract_baseline' => \$subtract_baseline,
    'qvalue=f'          => \$q_cutoff,
    'percolator=s'      => \$fn_perc,
    'perc_log=s'        => \$fn_perc_log,
    'stats=s'           => \$fn_stats,
    'plot_downsample=i' => \$plot_downsample,
) or die "Error parsing options\n";

# load separate percolator table if given
my ($qvals, $perc_probs) = defined $fn_perc
    ? parse_percolator()
    : (undef, undef);
# load separate percolator table if given
my %perc_idx = defined $fn_perc_log
    ? parse_percolator_log()
    : ();

# if multi-file crux percolator given, we need to iterate over all separate pepXML
# files. Otherwise, just parse the last command line argument
my @pepxml_files;
if (scalar keys %perc_idx) {
    @pepxml_files = keys %perc_idx;
}
else {
    @pepxml_files = ($ARGV[-1]);
}

# track PSM status
my $n_spectra                 = 0;
my $n_passed                  = 0;
my $n_empty                   = 0;
my $n_failed_min_channels     = 0;
my $n_failed_min_int          = 0;
my $n_failed_coelute          = 0;
my $n_no_matches :shared      = 0;
my $n_failed_q_cutoff :shared = 0;
my $n_multiple_hits :shared   = 0;

my $pepxml :shared;
my $file_idx :shared;
my @reporter_names;

# these scalars will contain the actual output. Because of the way crux
# percolator files are parsed, it must be cached and printed at the end
my $header = '';
my $body = '';

$header .= "## Produced by tmt_quant v$VERSION\n";
$header .= "## Command-line arguments: @orig_argv\n";
$header .= "## Final reporter windows:\n";

for my $infile (@pepxml_files) {

    $pepxml = $infile;
    $file_idx = $perc_idx{ $infile }; # can be undef

    say STDERR "Processing $infile\n---------------------";

    my $px_parser = MS::Reader::PepXML->new($pepxml);
    my $n_runs = $px_parser->n_lists();

    die "Tag configuration file required" if (! defined $fn_tags);

    # read in tag masses
    my @reporters;
    open my $tags, '<', $fn_tags or die "Error opening tags file: $!\n";
    while (my $line = <$tags>) {
        chomp $line;
        my ($name, $mz) = split "\t", $line;
        die "Invalid tag file\n" if (! defined $mz);
        die "Invalid tag file\n" if ($mz !~ /^[\d\.]+$/);
        my $ref = { name => $name };
        for (0..$n_runs-1) {
            $ref->{$_}->{center} = $mz;
        }
        push @reporters, $ref;
    }
    close $tags;
    if (! scalar @reporter_names) {
        @reporter_names = map {$_->{name}} @reporters;
    }

    my $REP_LOWER = min( map {$_->{0}->{center}} @reporters) - 1;
    my $REP_UPPER = max( map {$_->{0}->{center}} @reporters) + 1;

    for my $i (0..$#reporters) {
        my $tol = $recal_reporters ? $reporter_tol*3 : $reporter_tol;
        my $lower = $reporters[$i]->{0}->{center}*(1-$tol/1000000);
        my $upper = $reporters[$i]->{0}->{center}*(1+$tol/1000000);
    
        # make sure windows don't overlap
        if ($i > 0) {
            my $mid = (
                $reporters[$i-1]->{0}->{center}
            + $reporters[$i  ]->{0}->{center} ) / 2;
            $lower = $mid if ($lower < $mid);
        }
        if ($i < $#reporters) {
            my $mid = (
                $reporters[$i  ]->{0}->{center}
            + $reporters[$i+1]->{0}->{center} ) / 2;
            $upper = $mid if ($upper > $mid);
        }

        for (0..$n_runs-1) {
            $reporters[$i]->{$_}->{lower} = sprintf "%0.7f", $lower;
            $reporters[$i]->{$_}->{upper} = sprintf "%0.7f", $upper;
        }
    }


    warn "Windows for first scan:\n";
    for my $rep (@reporters) {
        for my $run (0..$n_runs-1) {
            warn join( "\t",
                $rep->{name},
                "run $run",
                $rep->{$run}->{center},
                $rep->{$run}->{lower},
                $rep->{$run}->{upper},
            ) . "\n";
        }
    }

    # import isotope impurity matrix, if provided
    my $impurities;
    if (defined $fn_impurities) {
        open my $in, '<', $fn_impurities;
        my $h = <$in>;
        my @m;
        while (my $line = <$in>) {
            chomp $line;
            my @parts = split "\t", $line;
            shift @parts;
            push @m, [@parts];
        }
        $impurities = Math::Matrix->new( @m )->transpose;
    }

    # track reporter mass error for summary purposes
    my @obs_mz  = map { {map {$_->{name} => []} @reporters} } 0..($n_runs-1);
    my @obs_int = map { {map {$_->{name} => []} @reporters} } 0..($n_runs-1);
    my $obs_mz  = shared_clone(\@obs_mz);
    my $obs_int = shared_clone(\@obs_int);

    my @channel_sums :shared = map {0} (0..$#reporters);

    my @spectra :shared = ();

    my $hit_queue = Thread::Queue->new();
    my @workers;
    for (1..$threads) {
        push @workers, threads->create(
            \&process_psm,
            $hit_queue,
            $REP_LOWER,
            $REP_UPPER,
            \@reporters,
            $obs_mz,
            $obs_int,
            \@channel_sums,
            \@spectra,
        );
    }


    $n_spectra += load_queue($hit_queue);

    # wait for all threads to finish
    for (@workers) {
        $_->join();
    }

    # correct channel sums for impurities
    if (defined $impurities) {
        my $uncorrected = Math::Matrix->new([@channel_sums]);
        my $a = $impurities->concat( $uncorrected->transpose );
        @channel_sums = @{ $a->solve()->transpose->[0] };
    }

    if ($print_obs) {
        for my $run (0..$n_runs-1) {
            for my $tag (keys %{$obs_mz->[$run]}) {
                my @observed_mz  = @{  $obs_mz->[$run]->{$tag} };
                my @observed_int = @{ $obs_int->[$run]->{$tag} };
                my $m = median(@observed_mz);
                my $s = mad(@observed_mz);
                my $n = scalar(@observed_mz);
                for (0..$#observed_mz) {
                    my $mz  = $observed_mz[$_];
                    my $int = $observed_int[$_];
                    my $diff = $mz - $m;
                    print "$run\t$tag\t$mz\t$diff\t$int\n";
                }
                warn "$run\t$tag\t$n\t$m\t$s\n";
            }
        }
        exit;
    }

    if ($recal_reporters) {
        warn "----------------------\n";
        warn "recalibrated channels:\n";
        for my $tag (@reporters) {

            my $name = $tag->{name};

            for my $run (0..$n_runs-1) {
                my @observed = @{ $obs_mz->[$run]->{$name} };
                my $stat = Statistics::Descriptive::Sparse->new();
                $stat->add_data(@observed);
                my $mean = $stat->mean;
                my $sd   = $stat->standard_deviation;
                $tag->{$run}->{center} = sprintf "%0.7f", $mean;
                $tag->{$run}->{lower}  = sprintf "%0.7f", $mean-$sd*$sd_tol;
                $tag->{$run}->{upper}  = sprintf "%0.7f", $mean+$sd*$sd_tol;
            }
        }

        # make sure windows don't overlap (may happen for very wide tolerances)
        for my $i (0..$#reporters) {

            my $name = $reporters[$i]->{name};

            for my $run (0..$n_runs-1) {

                my $lower = $reporters[$i]->{$run}->{lower};
                my $upper = $reporters[$i]->{$run}->{upper};
                
                if ($i > 0) {
                    my $mid = (
                        $reporters[$i-1]->{$run}->{center}
                    + $reporters[$i  ]->{$run}->{center} ) / 2;
                    $lower = $mid if ($lower < $mid);
                }
                if ($i < $#reporters) {
                    my $mid = (
                        $reporters[$i  ]->{$run}->{center}
                    + $reporters[$i+1]->{$run}->{center} ) / 2;
                    $upper = $mid if ($upper > $mid);
                }

                $reporters[$i]->{$run}->{lower} = sprintf "%0.7f", $lower;
                $reporters[$i]->{$run}->{upper} = sprintf "%0.7f", $upper;
                warn join("\t",
                    $name,
                    "run $run",
                    $reporters[$i]->{$run}->{center},
                    $reporters[$i]->{$run}->{lower},
                    $reporters[$i]->{$run}->{upper},
                ) . "\n";
            }
        }
        warn "----------------------\n";
    }

    if (defined $plot_reporters) {

        my $R = Statistics::R->new();

        # initialize PDF
        $R->run(qq`pdf("$pepxml.$plot_reporters", 11, 8.5, pointsize=11, useDingbats=F)`);
        $R->run(q`par(mfrow=c(4,5))`);
        $R->run(q`par(mgp=c(2.2,0.7,0))`);
        $R->run(q`par(mar=c(2.5,2.5,2.0,2.0))`);
        $R->run(q`par(omi=c(1,1,1,1))`);

        for my $tag (@reporters) {

            my @lowers;
            my @uppers;
            my @series;
            my $name = $tag->{name};

            for my $run (0..$n_runs-1) {
                push @lowers, $tag->{$run}->{lower};
                push @uppers, $tag->{$run}->{upper};
                push @series, $obs_mz->[$run]->{$name};
            }
            my $x_min = min( @lowers, map {@$_} @series );
            my $x_max = max( @uppers, map {@$_} @series );
                

            $R->set('xmin', $x_min);
            $R->set('xmax', $x_max);
            $R->run(q`xlo <- xmin - (xmax-xmin)*.15`);
            $R->run(q`xhi <- xmax + (xmax-xmin)*.15`);
            $R->run(q`xhi <- xmax + (xmax-xmin)*.15`);

            for (0..$#series) {
               
                my @set = @{ $series[$_] };
                my $n = min(scalar(@set), $plot_downsample);
                my @use = shuffle(0..$#set);
                @use = @use[0..$n-1];
                @set = @set[@use];
                $R->set('mz', \@set);
                if ($_ == 0) {
                    $R->run(qq`plot(density(mz),xlim=c(xlo,xhi),main="$name",xlab="",ylab="",lwd=0.5)`);
                }
                else {
                    $R->run(qq`lines(density(mz),lwd=0.5)`);
                }
            }

            for (0..$#series) {

                $R->set('lower', $lowers[$_]);
                $R->set('upper', $uppers[$_]);
                $R->run(q`abline(v=lower,col="red",lwd=0.5)`);
                $R->run(q`abline(v=upper,col="red",lwd=0.5)`);

            }
        }
        for my $tag (@reporters) {

            my @lowers;
            my @uppers;
            my @mz;
            my @int;
            my $name = $tag->{name};

            for my $run (0..$n_runs-1) {
                push @lowers, $tag->{$run}->{lower};
                push @uppers, $tag->{$run}->{upper};
                push @mz, @{ $obs_mz->[$run]->{$name} };
                push @int, @{ $obs_int->[$run]->{$name} };
            }
            my $x_min = min( @lowers, @mz );
            my $x_max = max( @uppers, @mz );
                
            my $n = min(scalar(@mz), $plot_downsample);
            my @use = shuffle(0..$#mz);
            @use = @use[0..$n-1];
            @mz = @mz[@use];
            @int = @int[@use];

            $R->set('mz',  \@mz);
            $R->set('int', \@int);
            $R->set('xmin', $x_min);
            $R->set('xmax', $x_max);
            $R->run(q`xlo <- xmin - (xmax-xmin)*.15`);
            $R->run(q`xhi <- xmax + (xmax-xmin)*.15`);
            $R->run(q`xhi <- xmax + (xmax-xmin)*.15`);
            $R->run(qq`smoothScatter(mz,log10(int),xlim=c(xlo,xhi),main="$name",xlab="",ylab="")`);

            for (0..$#lowers) {

                $R->set('lower', $lowers[$_]);
                $R->set('upper', $uppers[$_]);
                $R->run(q`abline(v=lower,col="red",lwd=0.5)`);
                $R->run(q`abline(v=upper,col="red",lwd=0.5)`);

            }

        }
        $R->run(q`mtext("m/z", side=1, outer=T, at=0.5)`);
        $R->run(q`mtext("density", side=2, outer=T, at=0.75)`);
        $R->run(q`mtext("log10 intensity", side=2, outer=T, at=0.25)`);
        $R->run(q`dev.off()`);

    }    

    my $total_int = sum @channel_sums;
    my @scale_factors = map {$_/$total_int} @channel_sums;

    for my $tag (@reporters) {
        for my $run (0..$n_runs-1) {
            $header .= "##   " . join( "\t",
                $pepxml,
                $tag->{name},
                "run $run",
                $tag->{$run}->{lower},
                $tag->{$run}->{upper},
            ) . "\n";
        }
    }


    SPECTRUM:
    for my $spectrum (@spectra) {

        my @parts = @{$spectrum};

        my ($run, $name,$prob,$qval,$peptide,$mz,$charge,$full_peptide,$protein,$inf,$baseline,$is_ntagged,$tagged_lys)
            = splice @parts, 0, 13;
        if (! scalar(@parts)) {
            ++$n_empty;
            #warn "empty reporter window\n";
            next SPECTRUM;
        }
        die "reporter values not multiple of 2!\n" if (scalar(@parts) % 2);
        my $mid = scalar(@parts)/2;
        my @mz_reporter_win  = @parts[0..$mid-1];
        my @int_reporter_win = @parts[$mid..$#parts];
        my ($rep_mz,$rep_int) = extract_channels($run, \@mz_reporter_win, \@int_reporter_win, \@reporters);

        # filter by minimum number of matched channels
        if (keys %$rep_int < $min_matched) {
            #warn "Too few channels matched\n";
            ++$n_failed_min_channels;
            next SPECTRUM;
        }

        my @values = map {defined $rep_int->{$_->{name}} ? $rep_int->{$_->{name}} : $baseline} @reporters;
        if (any {$_ < $baseline} @values) {
            warn "@values less than $baseline!!!!\n";
            exit;
        }
        @values = map {$_ - $baseline} @values
            if ($subtract_baseline);
        
        if (max(@values) < $min_int) {
            #warn "below min int\n";
            ++$n_failed_min_int;
            next SPECTRUM;
        }

        if ($max_coelute && $inf > $max_coelute) {
            ++$n_failed_coelute;
            next SPECTRUM;
        }

        # correct channel sums for impurities
        if (defined $impurities) {
            my $uncorrected = Math::Matrix->new([@values]);
            my $a = $impurities->concat( $uncorrected->transpose );
            @values = @{ $a->solve()->transpose->[0] };
        }

        # correct for coeluting precursors
        my @interferences = map {0} @scale_factors;
        if ($correct_coelute) {
            my $sum_interference = sum(@values) * $inf;
            @interferences = map {$_ * $sum_interference} @scale_factors;
        }

        my $print_string = "$name\t$prob\t$qval\t$peptide\t$mz\t$charge\t$full_peptide\t$protein\t$inf\t$is_ntagged\t$tagged_lys";
        for (0..$#reporters) {
            my $int  = $values[$_] - $interferences[$_];
            $int = 0 if ($int < 0 && $zero_floor);
            if (defined $digits) {
                $int = sprintf "%.${digits}f", $int;
            }
            $print_string .= "\t$int";
        }
        $print_string .= "\n";
        $body .= $print_string;

        ++$n_passed;

    }

}

warn "Summary:\n";
warn "----------------------\n";
warn "Total spectra:             $n_spectra\n";
warn "No matches:                $n_no_matches\n";
warn "Failed FDR cutoff:         $n_failed_q_cutoff\n";
warn "Failed multihit check:     $n_multiple_hits\n";
warn "Failed coisolation cutoff: $n_failed_coelute\n";
warn "Empty window:              $n_empty\n";
warn "Failed min channels:       $n_failed_min_channels\n";
warn "Failed min intensity:      $n_failed_min_int\n";
warn "Passing spectra:           $n_passed\n";
warn "----------------------\n\n";

if (defined $fn_stats) {
    open my $fh_stats, '>', $fn_stats;
    say {$fh_stats} join "\t", 'total',                $n_spectra;
    say {$fh_stats} join "\t", 'no_matches',           $n_no_matches;
    say {$fh_stats} join "\t", 'failed_fdr',           $n_failed_q_cutoff;
    say {$fh_stats} join "\t", 'failed_multihit',      $n_multiple_hits;
    say {$fh_stats} join "\t", 'failed_coisolation',   $n_failed_coelute;
    say {$fh_stats} join "\t", 'empty_windows',        $n_empty;
    say {$fh_stats} join "\t", 'failed_min_channels',  $n_failed_min_channels;
    say {$fh_stats} join "\t", 'failed_min_intensity', $n_failed_min_int;
    say {$fh_stats} join "\t", 'passed',               $n_passed;
    close $fh_stats;
}

print $header;
say join "\t", qw/
    id
    probability
    q-value
    peptide
    mz
    charge
    full_peptide
    protein
    coelute_inf
    is_ntagged
    tagged_Lys
    /,
    @reporter_names,
;
print $body;

exit;

sub round {

    my ($val,$places) = @_;
    if ($val > 0) {
        return int($val*10**$places+0.5)/10**$places;
    }
    else {
        return -int(-$val*10**$places+0.5)/10**$places;
    }

}

sub process_psm {

    my (
        $hit_queue,
        $REP_LOWER,
        $REP_UPPER,
        $reporters,
        $obs_mz,
        $obs_int,
        $channel_sums,
        $spectra,
    ) = @_;

    my $px_parser;
    {
        lock $pepxml;
        $px_parser = MS::Reader::PepXML->new($pepxml);
    }

    my %mzml;
    for my $run (0..$px_parser->n_lists()-1) {
        $px_parser->goto_list($run);
        my $mzml_fn = $px_parser->raw_file($run);
        if (! defined $mzml{$mzml_fn}) {
            my $mx_parser = MS::Reader::MzML->new($mzml_fn);
            $mzml{$mzml_fn} = $mx_parser;
        }
    }

    SPECTRUM:
    while (my $hit = $hit_queue->dequeue()) {
        my ($run_idx, $query_idx) = @{ $hit };

        $px_parser->goto_list($run_idx);
        my $query = $px_parser->fetch_result($query_idx);

        my $scan_id = $query->{spectrumNativeID};
        my $scan_num = $query->{start_scan};
        if (defined $file_idx) {
            $scan_num = join ':', $file_idx, $scan_num;
        }
            
        my $top = $query->get_hit(0);

        #apply early filters
        my $peptide = $top->{peptide};

        #ignore spectra with no hits
        if (! defined $peptide) {
            lock $n_no_matches;
            ++$n_no_matches;
            next SPECTRUM;
        }

        my $qval = '';

        #filter by qval if given
        if (defined $q_cutoff) {

            # undefined values are set to 1, as percolator does not output
            # decoys or matches with PEP=1
            
            $qval = $qvals->{$scan_num}
                // $top->{search_score}->{percolator_qvalue}
                // 1;

            if ($qval == DUP_Q) {
                lock $n_multiple_hits;
                ++$n_multiple_hits;
                next SPECTRUM;
            }
            if ($qval > $q_cutoff) {
                lock $n_failed_q_cutoff;
                ++$n_failed_q_cutoff;
                next SPECTRUM;
            }

        }

        my $mzml_fn = $px_parser->raw_file($run_idx);
        my $mx_parser = $mzml{$mzml_fn};
        
        my $scan_idx = $mx_parser->spectrum_index_by_id($scan_id);
        my $ms2 = $mx_parser->fetch_spectrum($scan_idx);

        my $inf = 'NA';

        #extract peptide and protein group string
        my $name = $query->{spectrum};
        my $z    = $query->{assumed_charge};
        my $mz   = sprintf "%0.4f", $ms2->precursor()->{mono_mz};

        my @proteins;

        my $full_peptide = $peptide;
        my $offset = 0;
        if (defined $top->{modification_info}->{mod_nterm_mass}) {
            my $tag = sprintf("n[%.0f]", $top->{modification_info}->{mod_nterm_mass});
            substr $full_peptide, 0, 0, $tag;
            $offset += length($tag);
        }
        if (defined $top->{modification_info}->{mod_aminoacid_mass}) {
            for ( sort {$a->{position} <=> $b->{position}} @{ $top->{modification_info}->{mod_aminoacid_mass} } ) {
                my $tag = sprintf("[%.0f]", $_->{mass});
                substr $full_peptide, $_->{position}+$offset, 0, $tag;
                $offset += length($tag);
            }
        }
        $full_peptide = join '.',
            $top->{peptide_prev_aa},
            $full_peptide,
            $top->{peptide_next_aa},
        ;

        my $nterm_mod = $top->{modification_info}->{mod_nterm_mass};
        my $is_ntagged = 0;
        $is_ntagged = 1 if (defined $nterm_mod
            && $nterm_mod > 230.169 && $nterm_mod < 230.172);

        my $tagged_lys = 0;
        if (defined $top->{modification_info}->{mod_aminoacid_mass}) {
            for ( @{ $top->{modification_info}->{mod_aminoacid_mass} } ) {
                ++$tagged_lys if ($_->{mass} > 357.254 && $_->{mass} < 357.260);
            }
        }

        #skip peptides with no N-term labeled and no labeled lysines
        next PEPTIDE if ($filter_unlabeled && ($is_ntagged + $tagged_lys == 0));

        my $protein = $top->{protein};
        $protein =~ s/\|/_/g;
        pos($protein) = 0;
        $protein =~ s/\.\d+$//;
        push @proteins, $protein;

        if (defined $top->{alternative_protein}) {
            for (@{ $top->{alternative_protein} }) {
                my $p = $_->{protein};
                $p =~ s/\|/_/g;
                pos($p) = 0;
                $p =~ s/\.\d+$//;
                next if ($p =~ /^$decoy_tag/);
                push @proteins, $p;
            }
        }

        $protein = join('|', sort {$a cmp $b} uniq @proteins);

        my %scores;
        for (@{ $top->{analysis_result} }) {
            my $name = $_->{analysis};
            $scores{$name} = $_->{"${name}_result"}->{probability};
        }
        my $prob = first {defined $_} (
            $scores{interprophet},
            $scores{peptideprophet},
            $perc_probs->{$scan_num},
            '',
        );
            
        my $inj_time = $scale_by_inj
            ? $ms2->{scanList}->{scan}->[0]->{cvParam}->{&MS_ION_INJECTION_TIME}->[0]->{value}
            : 1;
        my @mz  = @{ $ms2->mz };
        my @int = map {$_ * $inj_time} @{ $ms2->int };
        my $baseline = min @int;

        my @mz_reporter_win;
        my @int_reporter_win;
        MZ:
        for my $i (0..$#mz) {
            my $mass = $mz[$i];
            next MZ if ($mass < $REP_LOWER);
            last MZ if ($mass > $REP_UPPER);
            push @mz_reporter_win,  $mz[$i];
            push @int_reporter_win, $int[$i];
        }
        my ($rep_mz,$rep_int) = extract_channels($run_idx, \@mz_reporter_win, \@int_reporter_win, $reporters);

        my @values = map {defined $rep_int->{$_->{name}} ?  $rep_int->{$_->{name}} : $baseline} @{$reporters};

        if ($correct_coelute || $max_coelute) {

            # calculate S2I

            my $rt_m      = $ms2->rt();
            my $precursor = $ms2->precursor();

            my $iso_mz = $precursor->{iso_mz};
            my $lower  = $precursor->{iso_lower};
            my $upper  = $precursor->{iso_upper};
            my $p_mz   = $precursor->{mono_mz};
            my $charge = $precursor->{charge};

            # get survey scan
            my $scan_idx = $mx_parser->spectrum_index_by_id( $precursor->{scan_id} );
            $mx_parser->goto_spectrum( $scan_idx );
            my $ms1_e = $mx_parser->next_spectrum();
            die "failed to fetch MS1" if (! defined $ms1_e);

            my $rt_e = $ms1_e->rt();

            # calculate initial S2I
            my @mz  = @{ $ms1_e->mz };
            my @int = @{ $ms1_e->int };

            my $pre_sum = 0;
            my $all_sum = 0;
            MZ:
            for my $i (0..$#mz) {
                my $mass = $mz[$i];
                my $tol = $mass * $pre_tol / 1000000;
                my $shift = $mass * $pre_shift / 1000000;
                next MZ if ($mass < $lower - ($tol - $shift)*$fuzzy_edges);
                last MZ if ($mass > $upper + ($tol + $shift)*$fuzzy_edges);
                my $abund = $int[$i];
                my $tag = "$mass\t$abund\t$tol";
                $all_sum += $abund;

                my $proposed_H = round(($mass - $p_mz) * $charge, 0);
                my $err = $mass - ($p_mz + $proposed_H * PROTON / $charge);
                if (abs($err) <= $tol) {
                    $pre_sum += $abund;
                    $tag .= '*';
                }

            }
            my $s2i_e = ($all_sum > 0) ? $pre_sum/$all_sum : 0;
            my $s2i = $s2i_e;

            # also do following MS1 if present
            my $ms1_l;
            while ( my $scan = $mx_parser->next_spectrum() ) {
                if ($scan->ms_level() == 1) {
                    $ms1_l = $scan;
                    last;
                }
            }

            # also do following MS1 if present
            if (defined $ms1_l) {

                my $rt_l = $ms1_l->rt();

                # calculate next S2I
                my @mz  = @{ $ms1_l->mz };
                my @int = @{ $ms1_l->int };

                my $pre_sum = 0;
                my $all_sum = 0;
                MZ:
                for my $i (0..$#mz) {
                    my $mass = $mz[$i];
                    my $tol = $mass * $pre_tol / 1000000;
                    my $shift = $mass * $pre_shift / 1000000;
                    next MZ if ($mass < $lower - ($tol - $shift)*$fuzzy_edges);
                    last MZ if ($mass > $upper + ($tol + $shift)*$fuzzy_edges);
                    my $abund = $int[$i];
                    $all_sum += $abund;
                    my $tag = "$mass\t$abund\t$tol";

                    my $proposed_H = round(($mass - $p_mz) * $charge, 0);
                    my $err = $mass - ($p_mz + $proposed_H * PROTON / $charge);
                    if (abs($err) <= $tol) {
                        $pre_sum += $abund;
                        $tag .= '*';
                    }

                }
                my $s2i_l = ($all_sum > 0) ? $pre_sum/$all_sum : 0;
                $s2i = ($rt_m - $rt_e)*($s2i_l - $s2i_e)/($rt_l - $rt_e) + $s2i_e;

            }
            else {
                warn "failed to find following MS1\n";
            }

            #decontaminate
            
            $inf = 1 - $s2i;
        }

        if ($zero_floor) {
            @values = map {$_ > 0 ? $_ : 0} @values;
        }


        {
            lock $obs_mz;
            for (keys %{ $rep_mz }) {
                push @{ $obs_mz->[$run_idx]->{ $_ } },  $rep_mz->{$_};
            }
        }
        {
            lock $obs_int;
            for (keys %{ $rep_int }) {
                push @{ $obs_int->[$run_idx]->{ $_ } },  $rep_int->{$_};
            }
        }
        {
            lock @$channel_sums;
            for (0..$#values) {
                    $channel_sums->[$_] += $values[$_];
            }
        }
        {
            lock @$spectra;
            my @sp = (
                $run_idx,
                $name,
                $prob,
                $qval,
                $peptide,
                $mz,
                $z,
                $full_peptide,
                $protein,
                $inf,
                $baseline,
                $is_ntagged,
                $tagged_lys,
                @mz_reporter_win,
                @int_reporter_win,
            );
            push @$spectra, shared_clone([@sp]);
        }

    }
}

sub load_queue  {

    my ($hit_queue) = @_;

    my $px_parser;
    {
        lock $pepxml;
        $px_parser = MS::Reader::PepXML->new($pepxml);
    }

    my $n = 0;

    RUN:
    for my $run_idx (0..$px_parser->n_lists()-1) {
        $px_parser->goto_list($run_idx);
        SPECTRUM:
        for (0..$px_parser->result_count()-1) {
            $hit_queue->enqueue( [$run_idx, $_] );
            ++$n;
        }
    }
    warn "done loading\n";
    $hit_queue->enqueue(undef) for (1..$threads);

    return $n;

}


sub extract_channels {

    my %rep_mz;
    my %rep_int;

    my ($run, $mz_ref, $int_ref, $reporters) = @_;
    for my $i (0..$#{$mz_ref}) {
        my $mass = $mz_ref->[$i];
        for my $tag (@{$reporters}) {
            if ($mass > $tag->{$run}->{lower} && $mass <= $tag->{$run}->{upper}) {
                my $int = $int_ref->[$i];
                if (defined $rep_int{$tag->{name}}) {
                    if ($int > $rep_int{$tag->{name}}) {
                        $rep_int{$tag->{name}} = $int;
                        $rep_mz{$tag->{name}}  = $mass;
                    }
                }
                else {
                    $rep_int{$tag->{name}} = $int;
                    $rep_mz{$tag->{name}}  = $mass;
                }
            }
        }
    }
    return {%rep_mz}, {%rep_int};
}

sub median {

    my (@vals) = @_;
    return if (scalar(@vals) < 1);
    @vals = sort {$a <=> $b} @vals;
    my $mid_idx = int(scalar(@vals)/2);
    return scalar(@vals) % 2
        ?  $vals[$mid_idx]
        : ($vals[$mid_idx] + $vals[$mid_idx-1])/2;

}

sub mad {

    my (@vals) = @_;
    return if (scalar(@vals) < 1);
    my $m = median(@vals);
    return median( map {abs($_-$m)} @vals );

}

sub parse_percolator {

    my %qvals;
    my %perc_probs;

    open my $in, '<', $fn_perc;
    my $h = <$in>;
    chomp $h;
    my @headers = split "\t", $h;

    # handle tabular output from percolator or crux-percolator
    # Warning - first_index() returns -1 if no match found, not undefined!
    my $col_idx = (first_index {$_ eq 'PSMId' || $_ eq 'scan'} @headers);
    die "Missing expected index column in percolator table"
        if ($col_idx < 0);
    my $col_qval = (first_index {$_ eq 'q-value' || $_ eq 'percolator q-value'} @headers);
    die "Missing expected q-value column in percolator table"
        if ($col_qval < 0);
    my $col_file = (first_index {$_ eq 'file_idx'} @headers);
    $col_file = undef if ($col_file < 0);
    my $col_pep = (first_index {$_ eq 'posterior_error_prob' || $_ eq 'percolator PEP'} @headers);
    $col_pep = undef if ($col_pep < 0);

    # if file index is present, we need the crux percolator log to decode
    if (defined $col_file && ! defined $fn_perc_log) {
        die "Multi-file percolator table requires log file param (--perc_log)\n";
    }
    
    # parse lines
    while (my $line = <$in>) {
        chomp $line;
        my @fields = split "\t", $line;
        my $scan = $fields[ $col_idx ];
        # first check for percolator format
        if ($scan =~ /_(\d+)_\d+_\d+$/) {
            $scan = $1;
        }
        # then check percolator-crux format
        elsif ($scan =~ /^(\d+)$/) {
            $scan = $1;
        }

        # crux percolator output can have multiple files included, so we need
        # to add the file index to decode later
        if (defined $col_file) {
            $scan = join ':', $fields[ $col_file ], $scan;
        }
        else {
            die "Unexpected scan ID format ($scan) in percolator table";
        }

        # check for duplicate entries for scan (such as produced by crux
        # percolator. Assign these a special q-value of '2' -- obviously not a
        # real q-value but can be checked for and handled specifically and as
        # a backup will fail a threshold comparison
        my $q = defined $qvals{$scan} ? DUP_Q : $fields[ $col_qval ];
        $qvals{$scan} = $q;
        $perc_probs{$scan} = defined $col_pep
            ? 1 - $fields[$col_pep]
            : undef;
    }
    return (\%qvals, \%perc_probs);

}

sub parse_percolator_log {

    my %indices;

    open my $in, '<', $fn_perc_log;

    # parse lines
    while (my $line = <$in>) {
        chomp $line;
        if ($line =~ /^INFO: Assigning index (\d+) to (.+)\.$/) {
            $indices{$2} = $1;
        }
    }

    die "Failed to find file indices in log\n"
        if (! scalar keys %indices);

    return %indices;

}
