#!/usr/bin/perl

use v5.10.1;
use strict;
use warnings;

use MS::Reader::MzML;
use Data::Dumper;
use Getopt::Long;
use POSIX qw/floor/;
use autodie qw/open close/;

use threads;
use Thread::Queue;

my $fn_in;
my $fn_out;
my $mz_places  = 7;
my $int_places = 7;
my $rt_places = 4;
my $ms_level = 2;
my $threads = 1;

GetOptions(
    'in=s'       => \$fn_in,
    'out=s'      => \$fn_out,
    'mz_places=i'  => \$mz_places,
    'int_places=i' => \$int_places,
    'rt_places=i'  => \$rt_places,
    'ms_level=i'   => \$ms_level,
    'threads=i'    => \$threads,
);

die "Input not found\n" if (! -e $fn_in);

my $parser = MS::Reader::MzML->new($fn_in);
my $run_id = $parser->id;

my $qi = Thread::Queue->new();
my $qo = Thread::Queue->new();

my @workers;
for (1..$threads) {
    push @workers, threads->create(\&process_spectrum);
}

# load queue
my $c = $parser->record_count('spectrum');
for (0..$c-1) {
    $qi->enqueue($_);
}
$qi->enqueue(undef) for (1..$threads);
my $printer = threads->create(\&handle_output);

# wait for all threads to finish
for (@workers) {
    $_->join();
}
$qo->enqueue(undef);
$printer->join();

exit;

sub process_spectrum {

    my $p = MS::Reader::MzML->new($fn_in);

    while (defined (my $idx = $qi->dequeue())) {
        my $spectrum = $p->fetch_spectrum($idx);

        if ($spectrum->ms_level != $ms_level) {
            $qo->enqueue([$idx,undef]);
            next;
        }
        my $id = $spectrum->id;
        my $pre = $spectrum->precursor;
        my $rt  = round( $spectrum->rt, $rt_places );
        my $charge = $pre->{charge};
        my $pre_mass = $pre->{mono_mz};
        my $pre_int  = defined $pre->{intensity} ? $pre->{intensity} + 0 : undef;
        $pre_mass .= " $pre_int" if (defined $pre_int);
        my $int = $spectrum->int;
        my $mz   = $spectrum->mz;
        if ($id =~ /scan=(\d+)$/) {
            $id = $1;
        }
        my $title = "$run_id.$id.$id.$charge";

        my $chunk;
        $chunk .= "BEGIN IONS\n";
        $chunk .= "TITLE=$title\n";
        $chunk .= "RTINSECONDS=$rt\n";
        $chunk .= "PEPMASS=$pre_mass\n";
        $chunk .= "CHARGE=$charge+\n";
        for (0..$#{$mz}) {
            my $mass = round( $mz->[$_], $mz_places );
            my $intensity = round( $int->[$_], $int_places );
            $chunk .= "$mass $intensity\n";
        }
        $chunk .= "END IONS\n";
        $qo->enqueue( [$idx, $chunk] );

    }
    warn "Bye\n";

}

sub handle_output {

    my $fh_out = \*STDOUT;
    if (defined $fn_out) {
        die "output exists" if (-e $fn_out);
        open $fh_out, '>', $fn_out;
    }

    my $curr_idx = 0;
    my @waiting;
    while (my $ref = $qo->dequeue()) {
        my ($idx, $chunk) = @{$ref};
        if ($idx eq $curr_idx) {
            print {$fh_out} $chunk if (defined $chunk);
            ++$curr_idx;
        }
        else {
            push @waiting, $ref;
        }
        my $loop = 1;
        while ($loop) {
            $loop = 0;
            my @tmp;
            while (my $item = pop @waiting) {
                if ($item->[0] eq $curr_idx) {
                    print {$fh_out} $item->[1] if (defined $item->[1]);
                    ++$curr_idx;
                    ++$loop;
                }
                else {
                    push @tmp, $item;
                }
            }
            @waiting = @tmp;
        }
    }

}

sub round {

    my ($val,$places) = @_;

    return int($val*10**$places+0.5)/10**$places;

}
